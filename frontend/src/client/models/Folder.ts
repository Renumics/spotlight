/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FileEntry } from './FileEntry';
import {
    FileEntryFromJSON,
    FileEntryFromJSONTyped,
    FileEntryToJSON,
} from './FileEntry';

/**
 * A single folder
 * @export
 * @interface Folder
 */
export interface Folder {
    /**
     *
     * @type {string}
     * @memberof Folder
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Folder
     */
    path: string;
    /**
     *
     * @type {string}
     * @memberof Folder
     */
    parent?: string;
    /**
     *
     * @type {Array<FileEntry>}
     * @memberof Folder
     */
    files: Array<FileEntry>;
}

/**
 * Check if a given object implements the Folder interface.
 */
export function instanceOfFolder(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && 'name' in value;
    isInstance = isInstance && 'path' in value;
    isInstance = isInstance && 'files' in value;

    return isInstance;
}

export function FolderFromJSON(json: any): Folder {
    return FolderFromJSONTyped(json, false);
}

export function FolderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Folder {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        name: json['name'],
        path: json['path'],
        parent: !exists(json, 'parent') ? undefined : json['parent'],
        files: (json['files'] as Array<any>).map(FileEntryFromJSON),
    };
}

export function FolderToJSON(value?: Folder | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        name: value.name,
        path: value.path,
        parent: value.parent,
        files: (value.files as Array<any>).map(FileEntryToJSON),
    };
}
