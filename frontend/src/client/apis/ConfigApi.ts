/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { HTTPValidationError, ResponseGet, SetConfigRequest } from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ResponseGetFromJSON,
    ResponseGetToJSON,
    SetConfigRequestFromJSON,
    SetConfigRequestToJSON,
} from '../models';

export interface GetRequest {
    name: string;
}

export interface RemoveRequest {
    name: string;
}

export interface SetRequest {
    name: string;
    setConfigRequest: SetConfigRequest;
}

/**
 *
 */
export class ConfigApi extends runtime.BaseAPI {
    /**
     * get config value by name
     * Get Value
     */
    async getRaw(
        requestParameters: GetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ResponseGet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter requestParameters.name was null or undefined when calling get.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/config/{name}`.replace(
                    `{${'name'}}`,
                    encodeURIComponent(String(requestParameters.name))
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ResponseGetFromJSON(jsonValue)
        );
    }

    /**
     * get config value by name
     * Get Value
     */
    async get(
        requestParameters: GetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ResponseGet> {
        const response = await this.getRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove config value by name.
     * Remove Value
     */
    async removeRaw(
        requestParameters: RemoveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter requestParameters.name was null or undefined when calling remove.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/config/{name}`.replace(
                    `{${'name'}}`,
                    encodeURIComponent(String(requestParameters.name))
                ),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Remove config value by name.
     * Remove Value
     */
    async remove(
        requestParameters: RemoveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<any> {
        const response = await this.removeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set config value by name.
     * Set Value
     */
    async setRaw(
        requestParameters: SetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter requestParameters.name was null or undefined when calling set.'
            );
        }

        if (
            requestParameters.setConfigRequest === null ||
            requestParameters.setConfigRequest === undefined
        ) {
            throw new runtime.RequiredError(
                'setConfigRequest',
                'Required parameter requestParameters.setConfigRequest was null or undefined when calling set.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/api/config/{name}`.replace(
                    `{${'name'}}`,
                    encodeURIComponent(String(requestParameters.name))
                ),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: SetConfigRequestToJSON(requestParameters.setConfigRequest),
            },
            initOverrides
        );

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Set config value by name.
     * Set Value
     */
    async set(
        requestParameters: SetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<any> {
        const response = await this.setRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
