/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { HTTPValidationError, Table } from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TableFromJSON,
    TableToJSON,
} from '../models';

export interface GetCellRequest {
    column: string;
    row: number;
    generationId: number;
}

export interface GetWaveformRequest {
    column: string;
    row: number;
    generationId: number;
}

export interface OpenRequest {
    path: string;
}

/**
 *
 */
export class TableApi extends runtime.BaseAPI {
    /**
     * table cell api endpoint
     * Get Table Cell
     */
    async getCellRaw(
        requestParameters: GetCellRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<any>> {
        if (
            requestParameters.column === null ||
            requestParameters.column === undefined
        ) {
            throw new runtime.RequiredError(
                'column',
                'Required parameter requestParameters.column was null or undefined when calling getCell.'
            );
        }

        if (requestParameters.row === null || requestParameters.row === undefined) {
            throw new runtime.RequiredError(
                'row',
                'Required parameter requestParameters.row was null or undefined when calling getCell.'
            );
        }

        if (
            requestParameters.generationId === null ||
            requestParameters.generationId === undefined
        ) {
            throw new runtime.RequiredError(
                'generationId',
                'Required parameter requestParameters.generationId was null or undefined when calling getCell.'
            );
        }

        const queryParameters: any = {};

        if (requestParameters.generationId !== undefined) {
            queryParameters['generation_id'] = requestParameters.generationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/table/{column}/{row}`
                    .replace(
                        `{${'column'}}`,
                        encodeURIComponent(String(requestParameters.column))
                    )
                    .replace(
                        `{${'row'}}`,
                        encodeURIComponent(String(requestParameters.row))
                    ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * table cell api endpoint
     * Get Table Cell
     */
    async getCell(
        requestParameters: GetCellRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<any> {
        const response = await this.getCellRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * table slice api endpoint
     * Get Table
     */
    async getTableRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Table>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/table/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            TableFromJSON(jsonValue)
        );
    }

    /**
     * table slice api endpoint
     * Get Table
     */
    async getTable(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Table> {
        const response = await this.getTableRaw(initOverrides);
        return await response.value();
    }

    /**
     * table cell api endpoint
     * Get Waveform
     */
    async getWaveformRaw(
        requestParameters: GetWaveformRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Array<number>>> {
        if (
            requestParameters.column === null ||
            requestParameters.column === undefined
        ) {
            throw new runtime.RequiredError(
                'column',
                'Required parameter requestParameters.column was null or undefined when calling getWaveform.'
            );
        }

        if (requestParameters.row === null || requestParameters.row === undefined) {
            throw new runtime.RequiredError(
                'row',
                'Required parameter requestParameters.row was null or undefined when calling getWaveform.'
            );
        }

        if (
            requestParameters.generationId === null ||
            requestParameters.generationId === undefined
        ) {
            throw new runtime.RequiredError(
                'generationId',
                'Required parameter requestParameters.generationId was null or undefined when calling getWaveform.'
            );
        }

        const queryParameters: any = {};

        if (requestParameters.generationId !== undefined) {
            queryParameters['generation_id'] = requestParameters.generationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/table/{column}/{row}/waveform`
                    .replace(
                        `{${'column'}}`,
                        encodeURIComponent(String(requestParameters.column))
                    )
                    .replace(
                        `{${'row'}}`,
                        encodeURIComponent(String(requestParameters.row))
                    ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * table cell api endpoint
     * Get Waveform
     */
    async getWaveform(
        requestParameters: GetWaveformRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Array<number>> {
        const response = await this.getWaveformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Open the specified table file  :raises InvalidPath: if the supplied path is outside the project root                      or points to an incompatible file
     * Open Table
     */
    async openRaw(
        requestParameters: OpenRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter requestParameters.path was null or undefined when calling open.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/table/open/{path}`.replace(
                    `{${'path'}}`,
                    encodeURIComponent(String(requestParameters.path))
                ),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Open the specified table file  :raises InvalidPath: if the supplied path is outside the project root                      or points to an incompatible file
     * Open Table
     */
    async open(
        requestParameters: OpenRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<any> {
        const response = await this.openRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
