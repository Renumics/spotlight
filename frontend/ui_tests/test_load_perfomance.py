"""Tests loading performance with different datasets"""

from datetime import datetime
from typing import Any, Dict

from selenium.webdriver.remote.webdriver import WebDriver
from pytest import FixtureRequest

from ui_tests.helpers import wait_for_tagged_element, screenshot_exception


def measure_reload_time(
    webdriver: WebDriver,
    frontend_base_url: str,
) -> float:
    """measure time to load the table"""
    with screenshot_exception(webdriver):

        from ui_tests._autogenerated_ui_elements import (
            DataTestTags,
        )  # pylint: disable-all

        start_time = datetime.now()
        webdriver.get(frontend_base_url)
        wait_for_tagged_element(webdriver, DataTestTags.DATAGRID_SETTINGS_DROPDOWN, 60)

        done_time = datetime.now()
        duration = (done_time - start_time).total_seconds()
        print(duration)
        return duration


def test_load_default_dataset(
    default_performance_dataset: Any,  # pylint:disable=unused-argument
    webdriver: WebDriver,
    frontend_base_url: str,
    request: FixtureRequest,
    results_bag: Dict[str, Any],
    skip_tour: None,  # pylint:disable=unused-argument
) -> None:
    """test performance with default dataset"""
    from ui_tests._autogenerated_ui_elements import DataTestTags  # pylint: disable-all

    with screenshot_exception(webdriver):

        duration = measure_reload_time(webdriver, frontend_base_url)
        results_bag[request.node.name] = duration

        # measured with 4.6 (notebook)
        assert duration < 4.6 * 4


def test_load_many_cols(
    many_cols_performance_dataset: Any,  # pylint:disable=unused-argument
    webdriver: WebDriver,
    frontend_base_url: str,
    request: FixtureRequest,
    results_bag: Dict[str, Any],
    skip_tour: None,  # pylint:disable=unused-argument
) -> None:
    from ui_tests._autogenerated_ui_elements import DataTestTags  # pylint: disable-all

    """test performance with many_cols_performance_dataset"""
    with screenshot_exception(webdriver):

        duration = measure_reload_time(webdriver, frontend_base_url)
        results_bag[request.node.name] = duration

        # measured with 32.282786 (notebook)
        assert duration < 32.282786 * 4


def test_load_large_embeddings(
    large_embeddings_performance_dataset: Any,  # pylint:disable=unused-argument
    webdriver: WebDriver,
    frontend_base_url: str,
    request: FixtureRequest,
    results_bag: Dict[str, Any],
    skip_tour: None,  # pylint:disable=unused-argument
) -> None:
    from ui_tests._autogenerated_ui_elements import DataTestTags  # pylint: disable-all

    """test performance with large_embeddings_performance_dataset"""
    with screenshot_exception(webdriver):

        duration = measure_reload_time(webdriver, frontend_base_url)
        results_bag[request.node.name] = duration

        # measured with 13.760015 (notebook)
        assert duration < 13.760015 * 4


def test_load_many_cols_large_embeddings(
    many_cols_large_embeddings_performance_dataset: Any,  # pylint:disable=unused-argument
    webdriver: WebDriver,
    frontend_base_url: str,
    request: FixtureRequest,
    results_bag: Dict[str, Any],
    skip_tour: None,  # pylint:disable=unused-argument
) -> None:
    from ui_tests._autogenerated_ui_elements import DataTestTags  # pylint: disable-all

    """test performance with many_cols_large_embeddings_performance_dataset"""
    with screenshot_exception(webdriver):

        duration = measure_reload_time(webdriver, frontend_base_url)
        results_bag[request.node.name] = duration

        # measured with 19.02718 (notebook)
        assert duration < 19.02718 * 4
