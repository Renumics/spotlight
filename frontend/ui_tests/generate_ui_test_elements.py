"""Generate python constants from TypeScript files"""
import re
from pathlib import Path
from typing import List


def get_data_tags_from_src(path: str) -> List[str]:
    """Get tag content of all elements tagged by data-test-tag"""
    tags = []
    for ts_file in Path(path).glob("**/*.ts*"):
        print(ts_file)
        with open(ts_file, encoding="utf-8") as file:
            text = "\n".join(file.readlines())
            matches = re.findall('(data-test-tag=")([a-z0-9-]*)(")', text)
            if matches:
                for match in matches:
                    tags.append(match[1])
    return tags


def generate_ui_test_elements_py() -> None:
    """Get tagged elements and create a python file containing all tags as constants"""
    data_tags = get_data_tags_from_src("src/")
    with open(
        "ui_tests/_autogenerated_ui_elements.py", "w", encoding="utf-8"
    ) as tagged_src:
        tagged_src.write(f'"""AUTO GENERATED BY {Path(__file__).name}"""\n\n\n')

        tagged_src.write(
            "class DataTestTags:  # pylint: disable=too-few-public-methods\n"
        )
        tagged_src.write('    """list of all tags found in src/*.ts*"""\n\n')

        for data_tag in sorted(data_tags):
            tagged_src.write(
                f'    {data_tag.upper().replace("-", "_")} = "{data_tag}"\n'
            )
