"""Helpers for ui-tests"""
import time
from pathlib import Path
from typing import Callable, Iterator
from datetime import datetime
from contextlib import contextmanager
import pytest
import requests
from selenium.webdriver.common.by import By
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver.remote.webelement import WebElement
from selenium.common.exceptions import (
    StaleElementReferenceException,
    NoSuchElementException,
)


class LoadingIsStillDisplayed(Exception):
    """raised when loading is still display and element is hidden"""


class NoMatchingElementsFound(Exception):
    """raised when no elements matching the query were found"""


class NoMatchingElementIsDisplayed(Exception):
    """raised when all matching elements are invisible"""


class ElementNotAvailable(Exception):
    """ "Raised when the GUI element is not available for any reason"""


@contextmanager
def screenshot_exception(webdriver: WebDriver) -> Iterator[None]:
    """catch exception and make a screenshot"""
    try:
        yield
    except Exception as e:
        new_screenshots_folder = Path(pytest.results_folder) / "screenshots"  # type: ignore
        now = time.strftime("%Y%m%d-%H%M%S")
        new_screenshot_path = (
            new_screenshots_folder
            / f"Exception_{now}_{e.__class__.__name__ }_{pytest.browser_name}.png"
        )
        webdriver.save_screenshot(str(new_screenshot_path))

        print(f"=== Exception logged into {new_screenshot_path} at {now} ===")
        print(e)
        print(f"=== browser logs ===")
        try:
            log = list(webdriver.get_log("browser"))
            for entry in log:
                print(entry)
        except:
            pass
        print(f"=========================================")

        raise e


def _wait_for_element(
    webdriver: WebDriver, getter: Callable, element_name: str, timeout: int
) -> WebElement:
    """use the given getter method to find a web element and wait until it is displayed"""

    def find_visible_element() -> WebElement:
        elements = getter()
        if _is_loading_circle_displayed(webdriver):
            raise LoadingIsStillDisplayed
        if len(elements) == 0:
            raise NoMatchingElementsFound
        for found_element in elements:
            if found_element.is_displayed():
                return found_element
        raise NoMatchingElementIsDisplayed

    start_time = datetime.now()
    current_time = start_time
    last_exception = None

    while (current_time - start_time).seconds < timeout:
        try:
            return find_visible_element()
        except (
            StaleElementReferenceException,
            NoMatchingElementsFound,
            NoMatchingElementIsDisplayed,
            LoadingIsStillDisplayed,
            NoSuchElementException,
        ) as exception:
            last_exception = exception
        current_time = datetime.now()
        time.sleep(0.3)

    raise ElementNotAvailable(
        f"Could not find element '{element_name}' "
        f"last exception ({type(last_exception)}): {last_exception}"
    )


def wait_for_tagged_element(
    webdriver: WebDriver, data_test_tag: str, timeout: int = 20
) -> WebElement:
    """wait for an element with the given data-test-tag"""
    time.sleep(0.3)
    return _wait_for_element(
        webdriver,
        lambda: webdriver.find_elements(
            by=By.CSS_SELECTOR, value=f"[data-test-tag='{data_test_tag}']"
        ),
        f"data-test-tag={data_test_tag}",
        timeout,
    )


def _is_loading_circle_displayed(webdriver: WebDriver) -> bool:
    """Check if loading circle is displayed"""
    from ui_tests._autogenerated_ui_elements import DataTestTags  # pylint: disable-all

    loading_circles = webdriver.find_elements(
        by=By.CSS_SELECTOR,
        value=f"[data-test-tag='{DataTestTags.GLOBAL_LOADING_INDICATOR}']",
    )
    return any(elem.is_displayed() for elem in loading_circles)


def get_tab(driver: WebDriver, tab_text: str) -> WebElement:
    """get a spotlight tab (e.g. All/Filtered/Selected or  Details or Scatterplot/Similarities"""
    button_text = _wait_for_element(
        driver,
        lambda: driver.find_elements(
            by=By.XPATH, value=f"//*[contains(text(), '{tab_text}')]"
        ),
        f"get_tab by text '{tab_text}'",
        10,
    )
    filtered_tab = button_text.find_element(by=By.XPATH, value="./..")
    return filtered_tab
